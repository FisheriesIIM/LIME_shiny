?snapper
library(LIME)
?snapper
library(shiny)
rm(list=ls())
shiny::runApp('C:/Git_Projects/LIME_shiny')
sim_pop
shiny::runApp('C:/Git_Projects/LIME_shiny')
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
Fdynamics <- "Constant"
Rdynamics <- "Constant"
rm(list=ls())
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Constant"
input$Rdynamics <- "Constant"
#     ChkRange()
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
lh
create_lh_list
par(mfrow=c(3,2))
plot(lh$Mat_a, type="l", lwd=4, col="gray", xlab="Age", ylab="Proportion")
lines(lh$S_a, lwd=4, lty=2, col="blue")
legend('bottomright', legend=c("Maturity", "Selectivity"), col=c("gray", "blue"), lty=c(1,2), lwd=4)
plot(lh$L_a, type="l", lwd=4, col="forestgreen", xlab="Age", ylab="Length (cm)")
plot(lh$L_a, type="l", lwd=4, col="forestgreen", xlab="Age", ylab="Length (cm)")
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=info$Rdynamics, Nyears_comp=1, comp_sample=1000, nburn=50, seed=123, modname="LC1")
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Fishing mortality")
plot(simdata$D_t, ylim=c(0, max(simdata$D_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Relative biomass")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Mean length in catch")
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=1, comp_sample=1000, nburn=50, seed=123, modname="LC1")
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Fishing mortality")
plot(simdata$D_t, ylim=c(0, max(simdata$D_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Relative biomass")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.1), type="l", lwd=4, col="black", xlab="Year", ylab="Mean length in catch")
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
rm(list=ls())
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Constant"
input$Rdynamics <- "Constant"
shiny::runApp('C:/Git_Projects/LIME_shiny')
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Endogenous"
input$Rdynamics <- "Constant"
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
par(mfrow=c(3,2))
plot(lh$Mat_a, type="l", lwd=4, col="gray", xlab="Age", ylab="Proportion")
lines(lh$S_a, lwd=4, lty=2, col="blue")
legend('bottomright', legend=c("Maturity", "Selectivity"), col=c("gray", "blue"), lty=c(1,2), lwd=4)
plot(lh$L_a, type="l", lwd=4, col="forestgreen", xlab="Age", ylab="Length (cm)")
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=1, comp_sample=1000, nburn=50, seed=123, modname="LC1")
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.5), type="l", lwd=4, col="black", xlab="Year", ylab="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.5), type="l", lwd=4, col="black", xlab="Year", ylab="Fishing mortality")
plot(simdata$D_t, ylim=c(0, max(simdata$D_t)*1.5), type="l", lwd=4, col="black", xlab="Year", ylab="Relative biomass")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.5), type="l", lwd=4, col="black", xlab="Year", ylab="Mean length in catch")
lh$Frate
lh
library(LIME)
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Endogenous"
input$Rdynamics <- "Constant"
create_lh_list
library(shiny)
library(LIME)
create_lh_list
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
lh$Frate
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
input
input$Fdynamics <- "Constant"
input$Rdynamics <- "Constant"
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=1, comp_sample=1000, nburn=50, seed=123, modname="LC1")
par(mfrow=c(5,5), mar=c(1, 1, 1, 1))
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Fishing mortality")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Mean length in catch")
plot(x=1, y=1, type="n", axes=F, ann=F)
plot(x=1, y=1, type="n", axes=F, ann=F)
for(i in 1:20){
LF <- simdata$LF[i,]
barplot(LF)
mtext(side=3, line=-2, i, font=2, cex=2)
abline(v=input$ML50, col="red", lwd=2)
}
simdata$LF
simdata$LF[1,]
#     ChkRange()
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=20, comp_sample=1000, nburn=50, seed=123, modname="LC1")
par(mfrow=c(5,5), mar=c(1, 1, 1, 1))
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Fishing mortality")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Mean length in catch")
plot(x=1, y=1, type="n", axes=F, ann=F)
plot(x=1, y=1, type="n", axes=F, ann=F)
for(i in 1:20){
LF <- simdata$LF[i,]
barplot(LF)
mtext(side=3, line=-2, i, font=2, cex=2)
abline(v=input$ML50, col="red", lwd=2)
}
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/shiny/LBSPR')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
#     ChkRange()
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=20, comp_sample=1000, nburn=50, seed=123, modname="LC1")
par(mfrow=c(5,5), mar=c(1, 1, 1, 1))
plot(simdata$R_t, ylim=c(0, max(simdata$R_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Relative recruitment")
plot(simdata$F_t, ylim=c(0, max(simdata$F_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Fishing mortality")
plot(simdata$ML_t, ylim=c(0, max(simdata$ML_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Mean length in catch")
plot(simdata$SB_t, ylim=c(0, max(simdata$SB_t)*1.3), type="l", lwd=4, col="black", xlab="Year", main="Spawning biomass")
plot(x=1, y=1, type="n", axes=F, ann=F)
for(i in 1:20){
pLF <- simdata$LF[i,]/sum(simdata$LF[i,])
barplot(pLF, ylim=c(0,max(simdata$LF[1,]/sum(simdata$LF[1,]))*1.1))
text(x=0.9*length(LF), y=0.9*max(LF), side=3, line=-2, i, font=2, cex=2)
abline(v=input$ML50, col="red", lwd=2)
}
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
plot(simdata$D_t, ylim=c(0, max(simdata$D_t)*1.5), type="l", lwd=4, col="black", xlab="Year", ylab="Relative biomass")
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.0245
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Constant"
input$Rdynamics <- "Constant"
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.6,0.5,0))
plot(lh$Mat_a, type="l", lwd=4, col="gray", xlab="Age", ylab="Proportion")
lines(lh$S_a, lwd=4, lty=2, col="blue")
legend('bottomright', legend=c("Maturity", "Selectivity"), col=c("gray", "blue"), lty=c(1,2), lwd=4)
plot(lh$L_a, type="l", lwd=4, col="forestgreen", xlab="Age", ylab="Length (cm)")
simpop
simdata <- sim_pop(lh=lh, Nyears=20, Fdynamics=input$Fdynamics, Rdynamics=input$Rdynamics, Nyears_comp=20, comp_sample=1000, nburn=50, seed=123, modname="LC1")
simdata
names(simdata)
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
input <- NULL
input$linf <- 64.58
input$vbk <- 0.21
input$ML50 <- 34
input$lwa <- 0.025
input$lwb <- 2.79
input$SL50 <- 37
input$binwidth <- 1
input$CVlen <- 0.1
input$SigmaR <- 0
input$SigmaF <- 0
input$Fdynamics <- "Constant"
input$Rdynamics <- "Constant"
input$Nyears <- 20
input$est_sigR <- TRUE
input$est_CVL <- FALSE
input$est_sigC <- FALSE
input$est_sigI <- FALSE
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
lh$highs
Nyears <- input$Nyears
LF <- as.matrix(data_LC())
colnames(LF) <- sapply(1:ncol(LF), function(x) as.numeric(strsplit(colnames(LF)[x], "X")[[1]][2]))
rownames(LF) <- years_LC()
It <- as.vector(t(data_Index()))
names(It) <- years_Index()
Ct <- as.vector(t(data_Catch()))
names(Ct) <- years_Catch()
obs_per_year <- rowSums(LF)
input_data <- list("years"=1:Nyears, "LF"=LF, "I_t"=It, "C_t"=Ct, "obs_per_year"=obs_per_year)
est_sigma <- NULL
sep <- ","
file1 <- read.csv("C:\\Git_Projects\\LIME_shiny\\sim\\LC20.csv", sep=sep)
file2 <- read.csv("C:\\Git_Projects\\LIME_shiny\\sim\\Index.csv", sep=sep)
file3 <- read.csv("C:\\Git_Projects\\LIME_shiny\\sim\\Catch.csv", sep=sep)
# Read CSV file
data_LC <- function(){
if (is.null(file1)) return(NULL)
d1 <- file1
d1[,2:ncol(d1)]
}
data_Index <- function(){
if (is.null(file2)) return(NULL)
d1 <- file2
as.matrix(d1[,2])
}
data_Catch <- function(){
if (is.null(file3)) return(NULL)
d1 <- file3
as.matrix(d1[,2])
}
years_LC <- function(){
if(is.null(file1)) return(NULL)
d1 <- file1
as.numeric(d1[,1])
}
years_Index <- function(){
d1 <- file2
as.numeric(d1[,1])
}
years_Catch <- function(){
d1 <- file3
as.numeric(d1[,1])
}
Nyears <- input$Nyears
LF <- as.matrix(data_LC())
colnames(LF) <- sapply(1:ncol(LF), function(x) as.numeric(strsplit(colnames(LF)[x], "X")[[1]][2]))
rownames(LF) <- years_LC()
It <- as.vector(t(data_Index()))
names(It) <- years_Index()
Ct <- as.vector(t(data_Catch()))
names(Ct) <- years_Catch()
obs_per_year <- rowSums(LF)
input_data <- list("years"=1:Nyears, "LF"=LF, "I_t"=It, "C_t"=Ct, "obs_per_year"=obs_per_year)
est_sigma <- NULL
lh
input_data
if(input$est_sigR) est_sigma <- c(est_sigma, "log_sigma_R")
if(input$est_CVL) est_sigma <- c(est_sigma, "log_CV_L")
if(input$est_sigC) est_sigma <- c(est_sigma, "log_sigma_C")
if(input$est_sigI) est_sigma <- c(est_sigma, "log_sigma_I")
if(all(is.null(It))==FALSE & all(is.null(Ct)==FALSE)) data_avail <- "Index_Catch_LC"
if(all(is.null(It))==FALSE & all(is.null(Ct))) data_avail <- "Index_LC"
if(all(is.null(It)) & all(is.null(Ct)==FALSE)) data_avail <- "Catch_LC"
if(all(is.null(It)) & all(is.null(Ct))) data_avail <- "LC"
lh <- create_lh_list(vbk=input$vbk, linf=input$linf, lwa=input$lwa, lwb=input$lwb, S50=input$SL50, M50=input$ML50, selex_input="length", maturity_input="length", binwidth=input$binwidth, CVlen=input$CVlen, SigmaR=input$SigmaR, SigmaF=input$SigmaF)
param_adjust <- NULL
if(lh$SigmaR==0) param_adjust <- c(param_adjust, "SigmaR")
if(lh$SigmaF==0) param_adjust <- c(param_adjust, "SigmaF")
if(lh$SigmaC==0) param_adjust <- c(param_adjust, "SigmaC")
if(lh$SigmaI==0) param_adjust <- c(param_adjust, "SigmaI")
val_adjust <- FALSE
if(all(is.null(param_adjust))==FALSE) val_adjust <- rep(0.01, length(param_adjust))
if(all(is.null(param_adjust))) param_adjust <- FALSE
input$goButton!=0
input$goButton
input$goButton=0
input$goButton!=0
res <- run_LIME(modpath=NULL, write=FALSE, lh=lh, input_data=input_data, est_sigma=est_sigma, data_avail=data_avail, rewrite=TRUE, fix_f=0, simulation=FALSE, REML=FALSE, f_true=FALSE, fix_param=FALSE, param_adjust=param_adjust, val_adjust=val_adjust)
rep <- res$Report
sdrep <- res$Sdreport
der <- res$Derived
rep
der
rep$F_t
plot(rep$F_t)
plot(rep$F_t, ylim=c(0,1))
shiny::runApp('C:/Git_Projects/LIME_shiny')
rm(list=ls())
shiny::runApp('C:/Git_Projects/LIME_shiny')
}
}
years_oi <- which(years_i %in% rownames(LF))
shiny::runApp('C:/Git_Projects/LIME_shiny')
shiny::runApp('C:/Git_Projects/LIME_shiny')
